type Tradegen @entity {
  # CandlestickDataFeedRegistry contract address.
  id: ID!

  # Total number of candlestick data feeds.
  candlestickDataFeedCount: Int!

  # Total number of bot performance data feeds.
  botPerformanceDataFeedCount: Int!

  # Total number of candlestick data feed updates.
  candlestickDataFeedUpdateCount: Int!

  # Total number of bot performance data feed updates.
  botPerformanceDataFeedUpdateCount: Int!

  # Total number of data requests.
  # This value gets incremented whenever BotPerformanceDataFeed.getTokenPrice() is called.
  dataRequestCount: Int!

  # Total revenue (in TGEN).
  # This value tracks the total amount of usage fees paid.
  totalRevenue: Int!
}

type CandlestickDataFeed @entity {
  # CandlestickDataFeed contract address
  id: ID!

  # Timestamp at which the data feed was created.
  createdOn: BigInt!

  # Whether the data feed is halted.
  isHalted: Boolean!

  # Address of the data feed's dedicated data provider.
  dataProvider: String!

  # Symbol of the data feed's asset.
  symbol: String!

  # Timeframe of the asset.
  timeframe: BigInt!

  # Timestamp at which the data feed was last updated.
  lastUpdated: BigInt!

  # The current price of the data feed.
  # This value is the 'close' of the latest candlestick.
  currentPrice: BigInt!

  # Total number of updates to this data feed.
  numberOfUpdates: Int!

  # Derived fields.
  candlesticks: [Candlestick!]! @derivedFrom(field: "candlestickDataFeed")
}

type BotPerformanceDataFeed @entity {
  # BotPerformanceDataFeed address
  id: ID!

  # Timestamp at which the data feed was created.
  createdOn: BigInt!

  # Whether the data feed is halted.
  isHalted: Boolean!

  # Address of the data feed's dedicated data provider.
  dataProvider: String!

  # Address of the trading bot.
  tradingBot: String!

  # The fee, in TGEN, that a contract pays when requesting data.
  usageFee: BigInt!

  # Total number of updates to this data feed.
  numberOfUpdates: Int!

  # Timestamp at which the data feed was last updated.
  lastUpdated: BigInt!

  # Total number of requests made to this data feed.
  numberOfDataRequests: Int!

  # Total revenue generated by this data feed.
  revenue: BigInt!

  # Derived fields.
  botPerformanceDayData: [BotPerformanceDayData!]! @derivedFrom(field: "botPerformanceDataFeed")
  orders: [Order!]! @derivedFrom(field: "botPerformanceDataFeed")
  dataRequests: [DataRequests!]! @derivedFrom(field: "botPerformanceDataFeed")
}

type Candlestick @entity {
  # <symbol>-<timeframe>-<timestamp>
  id: ID!

  # Timestamp at which the candlestick was registered.
  timestamp: BigInt!

  # A reference to this candlestick's data feed.
  candlestickDataFeed: CandlestickDataFeed!

  # Asset's symbol.
  symbol: String!

  # High price.
  high: BigInt!

  # Low price.
  low: BigInt!

  # Starting price of the candlestick.
  open: BigInt!

  # Ending price of the candlestick.
  close: BigInt!

  # Number of tokens traded.
  volume: BigInt!

  # Timestamp at which the candlestick started.
  startingTimestamp: BigInt!

  # Index in the data feed's list of updates.
  index: BigInt!
}

type Order @entity {
  # <trading bot address>-<order number>
  id: ID!

  # Timestamp at which the order was registered.
  timestamp: BigInt!

  # A reference to this order's data feed.
  botPerformanceDataFeed: BotPerformanceDataFeed!

  # Asset's symbol.
  symbol: String!

  # Whether this is a 'buy' order.
  isBuy: Boolean!

  # Timestamp at which the order was placed.
  orderTimestamp: BigInt!

  # Price of the asset when the order was placed.
  assetPrice: BigInt!

  # The new trading bot price.
  botPrice: BigInt!

  # Index in the data feed's list of updates.
  index: BigInt!
}

type DataRequest @entity {
  # <trading bot address>-<caller>-<timestamp>
  id: ID!

  # Timestamp at which the data request was made.
  timestamp: BigInt!

  # A reference to this data request's data feed.
  botPerformanceDataFeed: BotPerformanceDataFeed!

  # Address of the contract that made the data request.
  requestor: String!

  # Number of tokens paid.
  feePaid: BigInt!

  # The price of the trading bot at the time the data request was made.
  botPrice: BigInt!
}

# Data accumulated and condensed into day stats for all of Tradegen.
type TradegenDayData @entity {
  # Timestamp rounded to current day by dividing by 86400.
  id: ID!
  date: Int!

  # Number of candlestick data feed updates made for this day.
  candlestickDataFeedUpdateCount: Int!

  # Number of bot performance data feed updates made for this day.
  botPerformanceDataFeedUpdateCount: Int!

  # Data requests updates made for this day.
  dataRequestCount: Int!

  # Total revenue for the day.
  revenue: BigInt!
}

type TradingBotHourData @entity {
  id: ID!

  # Unix timestamp for start of hour.
  hourStartUnix: Int! 

  # A reference to the data feed.
  botPerformanceDataFeed: BotPerformanceDataFeed!

  # Number of updates to the data feed for this hour.
  numberOfUpdates: Int!

  # Bot price at the end of the hour.
  botPrice: BigInt!

  # Number of data requests made for this hour.
  numberOfDataRequests: Int!

  # Total revenue for this hour.
  revenue: BigInt!
}

type TradingBotDayData @entity {
  id: ID!
  date: Int!

  # A reference to the data feed.
  botPerformanceDataFeed: BotPerformanceDataFeed!

  # Number of updates to the data feed for this day.
  numberOfUpdates: Int!

  # Bot price at the end of the day.
  botPrice: BigInt!

  # Number of data requests made for this day.
  numberOfDataRequests: Int!

  # Total revenue for this day.
  revenue: BigInt!
}